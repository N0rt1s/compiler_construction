##<Start> --> <importing_modules> <rest>

##<importing_modules> --> # import <S_or_M> | null
##<S_or_M> --> Id | { Id <mutiple_Id> }
##<mutiple_Id> --> , Id <mutiple_Id> | null

##<rest> --> <class_dec> <more_classes>
##<more_classes> --> <rest> | null

##<dt> --> <dts> <is_array> 
##<dts> --> number | char | string | bool
##<is_array> --> [] | null

##<value> --> <VP> | <const> | (<exp>)

##<const> --> strConst | charConst | boolConst | numConst | <arrConst>

##<arrConst> --> [ <elementlist_arraylist> ]

#<elementlist_arraylist> --> <element_list> | <array_list>

#<element_list> --> <value> <more_array_value>

#<more_array_value> --> , <element_list> | null

#<array_list> -> arrConst <more_array>

#<more_array> --> , <array_list> | null

##<Inc_dec> --> ++ | -- 

##<index> --> numConst

#<OP> --> Id <OP_more_Id>
#<OP_more_Id> --> <OP_ex_Id> | null
#<OP_ex_Id> --> [<index>] <OP_Id_loop> | (<is_param_value>) <OP_Id_loop1> 
#<OP_Id_loop> --> . <OP> | (<is_param_value>) <OP_Id_loop1> | null
#<OP_Id_loop1> --> . <OP> 

#<VP> --> Id <VP_more_Id>
#<VP_more_Id> --> <VP_ex_Id> | null
#<VP_ex_Id> --> [<index>] <VP_Id_loop> | ( <is_param_value> ) <VP_Id_loop1> 
#<VP_Id_loop> --> . <VP> | ( <is_param_value> ) <VP_Id_loop1> | null
#<VP_Id_loop1> --> . <VP> | null

##<acces_specifiers> --> public | private 

##<jump_stat> --> break; | continue; 
##<CST> --> <acces_specifiers> <dec_or_cs> | null

##<IST> --> <acces_specifiers>  <dt> Id <Inter_Dec_Var_func> ; <IST>| null

#<dec_or_cs> --> <struct> | <dt> Id <Dec_Var_func> <CST>

#<MST> --> <Dec> <MST>| <for_loop> <MST> | <struct> <MST>| <if_stat> <MST>| <for_each_loop> <MST>| #<While_loop> <MST>| Id <func_call_Id_set_class_init> ; <MST> | <jump_stat> <MST> | <return_dec> <MST> | null

##<Dec_Var_func> --> <List> ; | ( <is_params> ) { <MST> }

##<Inter_Dec_Var_func> --> <I_List>  | ( <is_params> ) 

##<I_List> --> ,Id  <I_List> | null 

#<func_call_Id_set_class_init> --> <OP_ex_Id> <func_call_Id_set> | <class_init_or_not> | <Inc_dec> | = <exp>

#<class_init_or_not> --> Id | = new Id(<is_params>)

##<func_call_Id_set> --> ( <is_params> )  | = <exp> 

#<Dec> -->  <dt> Id <List> <put_value> ;
##<List> --> ,Id  <List> | null 
##<put_value> --> = <exp> | null

##<function> --> <acces_specifiers> <dt> Id(<is_params>){<MST>}
##<is_params> --> <parameters> | null
##<parameters> --> <dt_or_Id> Id <more_param>
##<dt_or_Id> --> <dt> | Id
##<more_param> --> , <parameters> | null
##<return_dec> --> return <exp> ; | null 

##<class_dec> --> <acces_specifiers> class Id <derived> { <constructor> <CST>}
##<derived> --> : Id <derived_list> | null
##<derived_list> --> , Id <derived_list> | null
##<constructor> --> Id ( <is_params> ) { <MST> }

##<Interface_dec> --> interface Id { <IST>}

##<struct> --> struct Id { <CST> }

##<class_init> --> Id Id = new Id(<is_params>);

##<func_call> --> <OP> ( <is_param_value> );

##<is_param_value> --> <param_values> | null
##<param_values> --> <OP> <more_value_param>
##<more_value_param> --> , <param_values> | null

##<Id_value_set> --> <OP> = <exp> ;

##<if_stat> --> if ( <exp> ) { <MST> } <elif_stat> <else_stat>

##<elif_stat> --> elif ( <conditions> ) { <MST> } <elif_stat> || null
##<else_stat> -->  else{ <MST> } 

##<for_loop> --> for ( <Part1> <exp> ; Id <Inc_dec> ){ <MST> }

#<Part1> --> <Dec>

##<While_loop> --> while ( <exp> ){ <MST> }
##<for_each_loop> --> forEach ( Id in Id ){ <MST> }

#<exp> --> <AE> <OE>
#<OE> --> or <AE> <OE> | null
#<AE> --> <RE> <AE1>
#<AE1> --> and <RE> <AE1> | null
#<RE> --> <E> <RE1> | null
#<RE1> --> RO <E> <RE1> | null
#<E> --> <T> <E1>
#<E1> --> PM <T> <E1> | null
#<T> --> <value> <T1>
#<T1> --> MDM <value> <T1> | null

