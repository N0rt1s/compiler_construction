##<Start> --> <importing_modules> <rest>

##<importing_modules> --> # import <S_or_M> | null
##<S_or_M> --> Id | { Id <mutiple_Id> }
##<mutiple_Id> --> , Id <mutiple_Id> | null

##<rest> --> <class_dec> <more_classes>
##<more_classes> --> <rest> | null

##<dt> --> <dts> <is_array> 
#<dts> --> number | char | string | bool
##<is_array> --> [] | null

##<value> --> <VP> | <const>

#<const> --> strConst | charConst | boolConst | numConst | <arrConst>

#<arrConst> --> strArrConst | charArrConst | boolArrConst | numArrConst | objArrConst

##<CO> --> > | < | <= | >= | == | != 

##<bool> --> true | false

##<lop> --> and | or

##<Inc_dec> --> ++ | -- 

#<index> --> numConst

#<OP> --> Id <ex_Id> | Id
#<ex_Id> --> [<index>] <Id_loop> | (<is_param_value>) <Id_loop1> 
#<Id_loop> --> . <OP> | (<is_param_value>) <Id_loop1> | null
#<Id_loop1> --> . <OP> 

#<VP> --> Id <ex_Id> | Id
#<ex_Id> --> [<index>] <Id_loop> | ( <is_param_value> ) <Id_loop1> 
#<Id_loop> --> . <VP> | ( <is_param_value> ) <Id_loop1> | null
#<Id_loop1> --> . <VP> | null

##<acces_specifiers> --> public | private | null

##<jump_stat> --> break; | continue; 

##<CST> --> <acces_specifiers> <dt> Id <Dec_Var_func> <CST> | null

#<MST> --> <acces_specifiers> <dt> Id <Dec_Var_func> <MST>| <struct> <MST>| <if_stat> <MST>| <for> <MST>| <for_each> <MST>| #<While> <MST>| Id <func_call_Id_set_class_init> <MST> | <jump_stat> <MST>

#<Dec_Var_func> --> <List> | ( <is_params> ) { <MST> <return_dec> }

#<func_call_Id_set_class_init> --> <ex_Id> <func_call_Id_set> | Id

#<func_call_Id_set> --> ( <is_params> ) ; | = <value> ;

#<Dec> --> <acces_specifiers> <dt> Id <List>
##<List> --> ,Id <put_value> <List> | ; 
##<put_value> --> = <value> <List> | null

##<function> --> <acces_specifiers> <dt> Id(<is_params>){<MST> <return_dec>}
##<is_params> --> <parameters> | null
##<parameters> --> <dt_or_Id> Id <more_param>
##<dt_or_Id> --> <dt> | Id
##<more_param> --> , <parameters> | null
##<return_dec> --> return <value> | null 

##<class_dec> --> class Id <derived> { <constructor> <CST>}
##<derived> --> : Id | null
##<constructor> --> Id ( <is_params> ) { <MST> }

#<struct> --> struct Id { <CST> }

#<class_init> --> Id Id = new Id();

##<func_call> --> <OP> ( <is_param_value> );

##<is_param_value> --> <param_values> | null
##<param_values> --> <OP> <more_value_param>
##<more_value_param> --> , <param_values> | null

##<Id_value_set> --> <OP> = <value>;

##<if_stat> --> if ( <conditions> ) { <MST> } <elif_stat> <else_stat>
##<conditions> --> <value> <CO> <value> <Econdition> | Id <Econdition> | <bool> <Econdition>
##<Econdition> --> <lop> <conditions> |null

##<elif_stat> --> elif ( <conditions> ) { <MST> } <elif_stat> || null

##<else_stat> -->  else{ <MST> } | <if_stat>

##<for_loop> --> for ( <Part1> <value> <CO> <value> ; Id <Inc_dec> ){ <MST> }
#<Part1> --> <Dec> | <Init> | ;

##<While_loop> --> while ( <conditions> ){ <MST> }

##<for_each_loop> --> forEach ( Id in Id ){ <MST> }
