Globals:

<Dt> --> <Dts> <is_array> 
<Dts> --> number | char | string | bool
<is_array> --> [] | null

<value> --> <VP> | <const>

<CO> --> > | < | <= | >= | == | != 

<bool> --> true | false

<LOP> --> and | or

<Inc_dec> --> ++ | -- 

<index> --> <number> | <string>

<OP> --> <Id> <ex_Id> | <Id>
<ex_Id> --> [<index>] <Id_loop> | (<parameters>) <Id_loop1> 
<Id_loop> --> . <OP> | (<parameters>) <Id_loop1> | null
<Id_loop1> --> . <OP> 

<VP> --> <Id> <ex_Id> | <Id>
<ex_Id> --> [<index>] <Id_loop> | (<parameters>) <Id_loop1> 
<Id_loop> --> . <VP> | (<parameters>) <Id_loop1> | null
<Id_loop1> --> . <VP> | null

<acces_specifiers> --> public | private | null

<jump_stat> --> break; | continue;

<CST> --> <acces_specifiers> <Dt> <Id> <Dec_Var_func> <CST>

<MST> --> <acces_specifiers> <Dt> <Id> <Dec_Var_func> <MST>| <struct> <MST>| <if_stat> <MST>| <for> <MST>| <for_each> <MST>| <While> <MST>| <Id> <func_call_Id_set_class_init> <MST> | <jump_stat> <MST>

<Dec_Var_func> --> <List> | (<is_params>){<MST> <return>}

<func_call_Id_set_class_init> --> <ex_Id> <func_call_Id_set> | <Id>

<func_call_Id_set> --> (<is_params>); | = <value>;

Starting:

<S> --> <importing_modules> <rest>

<importing_modules> --> # import <S_or_M> | null
<S_or_M> --> <SI> | <MI>
<SI> --> <Id> | {<Id><mutiple_Id>}
<mutiple_Id> --> , <Id> | null

<rest> --> <class> <more_classes>
<more_classes> --> <rest> | null

Declaration and Initialization:

<Dec> --> <acces_specifiers> <Dt> <Id> <List>
<List> --> ,<Id> <put_value> <List> | ;
<put_value> --> = <value> <List> | <List> 

<function> --> <acces_specifiers> <Dt> <Id>(<is_params>){<MST> <return>}
<is_params> --> <parameters> | null
<parameters> --> <DT_or_Id> <Id> <more_param>
<DT_or_Id> --> <Dt> | <Id>
<more_param> --> , <parameters> | null
<return> --> return <value> | null 

<class> --> class <Id> <derived> { <constructor> <CST>}
<derived> --> : <Id> | null
<constructor> --> <Id> (<is_params>){<MST>}

<struct> --> struct <Id> {<CST>}

<class_init> --> <Id> <Id> = new <Id>();

<func_call> --> <OP>(<is_params>);

<Id_value_set> --> <OP> = <value>;

Conditional Statements:

<if_stat> --> if (<conditions>){<MST>}
<conditions> --> <value> <CO> <value> <Econdition> | <Id> <Econdition> | <bool> <Econdition>
<Econdition> --> <LOP> <conditions> |null

<elif_stat> --> <if_stat> elif (<conditions>){<MST>}

<else_stat> --> <if_stat> {<MST>} | <elif_stat> {<MST>}


Loops:

<for> --> for (<Part1> <value> <CO> <value>;<Id><Inc_dec> ){<MST>}
<Part1> --> <Dec> | <Init> | ;

<While> --> while (<conditions>){<MST>}

<for_each> --> forEach(<Id> in <Id>){<MST>}
